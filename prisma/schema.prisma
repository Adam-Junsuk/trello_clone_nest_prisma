datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  userId    Int       @id @default(autoincrement())
  username  String
  password  String
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Boards      Boards[]
  Columns     Columns[]
  Cards       Cards[]
  Comments    Comments[]
  BoardsUsers BoardUsers[]
  ColumnUsers ColumnUsers[]
  CardUsers   CardUsers[]

  @@map("Users")
}

model Boards {
  boardId         Int      @id @default(autoincrement())
  CreatorId       Int
  name            String
  backgroundColor String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  Creator    Users        @relation(fields: [CreatorId], references: [userId])
  Columns    Columns[]
  BoardUsers BoardUsers[]

  @@map("Boards")
}

model BoardUsers {
  BoardId   Int
  UserId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Board Boards @relation(fields: [BoardId], references: [boardId])
  User  Users  @relation(fields: [UserId], references: [userId])

  @@id([BoardId, UserId])
  @@map("BoardUsers")
}

model Columns {
  columnId  Int      @id @default(autoincrement())
  BoardId   Int
  CreatorId Int?
  name      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Board       Boards        @relation(fields: [BoardId], references: [boardId], onDelete: Cascade)
  Creator     Users?        @relation(fields: [CreatorId], references: [userId])
  Cards       Cards[]
  ColumnUsers ColumnUsers[]

  @@map("Columns")
}

model ColumnUsers {
  ColumnId  Int
  UserId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Column Columns @relation(fields: [ColumnId], references: [columnId])
  User   Users   @relation(fields: [UserId], references: [userId])

  @@id([ColumnId, UserId])
  @@map("ColumnUsers")
}

model Cards {
  cardId      Int       @id @default(autoincrement())
  ColumnId    Int
  name        String
  description String?
  color       String?
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueDate     DateTime?

  Column Columns @relation(fields: [ColumnId], references: [columnId], onDelete: Cascade)

  Users     Users[]
  Comments  Comments[]
  CardUsers CardUsers[]

  @@map("Cards")
}

model CardUsers {
  CardId    Int
  UserId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User Users @relation(fields: [UserId], references: [userId])
  Card Cards @relation(fields: [CardId], references: [cardId])

  @@id([CardId, UserId])
  @@map("CardUsers")
}

model Comments {
  commentId Int       @id @default(autoincrement())
  content   String
  UserId    Int
  CardId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Card  Cards @relation(fields: [CardId], references: [cardId], onDelete: Cascade)
  Users Users @relation(fields: [UserId], references: [userId])

  @@map("Comments")
}

enum Role {
  CLIENT
  ADMIN
}
